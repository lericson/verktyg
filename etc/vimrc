" {{{ Settings

" The colorscheme
"colorscheme solarized
"colorscheme Tomorrow

" Who cares about vi?
set nocompatible

" Modelines are good
set modeline

" Hidden buffers <3
set hidden

" PEP 8
set et ts=8 sw=4 sts=4

" Set tilde with motion object
set tildeop

" Show cursor position at all time
set ruler

" Do auto indent
set autoindent

" Show matching brackets for 1 tenth of a second
set showmatch matchtime=1

" Disable autonewline feature
set textwidth=0

" Do not wrap lines automatically
set nowrap

" Show line numbers by default
set number

" Fold by markers
"set foldmethod=marker foldnestmax=1
" Do not autoclose folds when moving out of them
"set foldclose=

" Fold by indent, but open all folds by default
set foldmethod=indent foldnestmax=20 foldlevel=100

" Use incremental searching
set incsearch

" Make /foo case-isens, but /Foo case-sens
set smartcase ignorecase

" Hilighted search
set hlsearch

" Scroll follows cursor one-to-one, keep eight lines of margin
set scrolljump=1 scrolloff=8

" Side-scroll also follows one-to-one, keep 20 columns of margin
set sidescroll=1 sidescrolloff=20

" How to behave with automated formatting (like gq)
set formatoptions=qroct

" No _double_ join spaces after punctuation when using J et al.
set nojoinspaces

" Allow backspacing over anything
set backspace=start,eol,indent

" Set paste toggle to CTRL+p
"set pastetoggle=<C-p>

" Syntax hilighting synchronization options
syn sync minlines=500 maxlines=3000
syn on
set synmaxcol=4096

" Fast tty
set ttyfast ttyscroll=1
let g:tex_no_error=1
let g:tex_fast='M'

" Listings (the list command)
set showbreak=…\ 
set list listchars=tab:▸\ ,eol:¬,nbsp:␣,extends:⟩,precedes:⟨

" .viminfo settings (mostly defaults)
set viminfo=%100,'100,/100,h,\"500,:100,n~/.viminfo

" Path extend
set path+=/usr/local/include

" Disable swap files
set noswapfile

" Enable ft
filetype on            " enables filetype detection
filetype plugin on     " enables filetype specific plugins

" Leader
let mapleader=","
let maplocalleader=","

" }}} Settings

" {{{ netrw settings
let g:netrw_hide=1
let g:netrw_list_hide='\.py[oc]$,^.DS_Store$'
" }}}

" {{{ Alt-[0-9] tab keymap

" Note that most terminals these days send <ESC> then the key when you hit
" alt-<key>, thus I've told vim to use <ESC><key>.
noremap <ESC>1 1gt
noremap <ESC>2 2gt
noremap <ESC>3 3gt
noremap <ESC>4 4gt
noremap <ESC>5 5gt
noremap <ESC>6 6gt
noremap <ESC>7 7gt
noremap <ESC>8 8gt
noremap <ESC>9 9gt
noremap <ESC>l gt
noremap <ESC>h gT

" Cmd-[num] etc.
noremap <M-Tab> <C-W>w
noremap <S-M-Tab> <C-W>W
noremap <D-S-Right> gt
noremap <D-S-Left> gT
noremap <D-1> 1gt
noremap <D-2> 2gt
noremap <D-3> 3gt
noremap <D-4> 4gt
noremap <D-5> 5gt
noremap <D-6> 6gt
noremap <D-7> 7gt
noremap <D-8> 8gt
noremap <D-9> 9gt

" }}}

" {{{ Misc keybinds

" Save and make
noremap <C-o> :make<CR>
inoremap <C-o> <ESC><C-o>a

" }}}

" {{{ Autocompletion using tab

function! TabOrComplete(shift, compl)
    if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
        return a:shift
    else
        return a:compl
    endif
endfunction
inoremap <expr>   <tab> TabOrComplete('<tab>', '<c-n>')
inoremap <expr> <s-tab> TabOrComplete('<bs>',  '<c-p>')

" }}}

" {{{ Typo-consolation command aliases
command! W w
command! Wq wq
command! WQ wq
" }}}

" {{{ Background light/dark
if has("gui_running")
    set background=dark
    set fuoptions=maxvert,maxhorz
    "set guifont=Menlo\ Regular:h14
    "set guifont=Source\ Code\ Pro:h14
    set macligatures guifont=Hasklig:h14
    set guitablabel=%N.\ %t\ %M
else
    "set background=dark
endif
" }}}

" {{{ Restore cursor position

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

" }}}

" {{{ vim -b: .bin editing
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END
" }}}

" {{{ Abbrs
iab pyshe #!/usr/bin/env python
iab pyenc # -*- coding: utf-8 -*-
iab pydefmain def main(args=sys.argv[1:]):
iab pyifmain if __name__ == "__main__":
iab pydoct <tab>import doctest<cr>doctest.testmod()
iab improt import
iab pylog log = logging.getLogger(__name__)
iab debuglog __import__("logging").warn
iab pypdb __import__("pdb").set_trace()
iab pyerr print >>__import__("sys").stderr,
iab py23 from __future__ import print_function, unicode_literals
iab htmltmpl <!doctype html><cr><html><cr><cr>  <head><cr>    <title></title><cr>  </head><cr><cr>  <body><cr>  </body><cr><cr></html>
iab texfig \begin{figure}[ht]<cr>\centering\includegraphics[width=0.95\textwidth]{foo}<cr>\caption{My figure}<cr>\label{fig:foo}<cr>\end{figure}
iab texlist \begin{itemize}<cr>\end{itemize}<up>
" }}}

" {{{ :Xbit
function! SetExecutableBit()
  let fname = expand("%:p")
  checktime
  execute "au FileChangedShell " . fname . " :echo"
  silent !chmod a+x %
  checktime
  execute "au! FileChangedShell " . fname
endfunction
command! Xbit call SetExecutableBit()
" }}}

" {{{ Wildmenu

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.pyc,*.luac                     " Byte code caches

" }}}

" Hilight bad whitespace
fun! HilightBadWhitespace()
  /\ \+\t\|\s\+$
endfun
command! WhitespaceFix call HilightBadWhitespace()

" {{{ :PY -- run Python file if pyflakes passes
fun! RunPythonFlakes(etc)
  "!pyflakes % && echo %: syntax ok
  execute '!pyflakes % && python3 %' a:etc
endfun
command! -nargs=? PY call RunPythonFlakes(<q-args>)
" }}}

" Blowfish2 for :X
set cm=blowfish2

" 2-space indent in HTML/CSS/JS.
augroup SpaceMe
  autocmd!
  autocmd BufEnter * if &filetype == "coffee" || &filetype == "php" || &filetype == "html" || &filetype == "htmldjango" || &filetype == "htmljinja" || &filetype == "css" || &filetype == "javascript" | setlocal ts=2 sw=2 sts=2 | endif
  autocmd BufEnter ~/devel/sap/skolpytt/* setlocal sw=4 sts=4 expandtab
augroup END

" TeX Sync with Skim
fun! SkimAt(texfn, pdffn, ln)
    if ! filereadable(a:pdffn)
        echo 'File ' . a:pdffn . ' does not exist, let b:pdffile=...'
    else
        echo 'Skim jump to line ' . a:ln . ' of ' . a:pdffn
        execute 'silent !/Applications/Skim.app/Contents/SharedSupport/displayline -g ' . shellescape(a:ln) . ' ' . shellescape(a:pdffn) . ' ' . a:texfn
    endif
endfun
command! SkimHere call SkimAt(expand('%'), get(b:, 'pdffile', expand('%<').'.pdf'), line('.'))
noremap <localleader>f :SkimHere<cr>

" Pathogen {{{
execute pathogen#infect()
"}}}

" Flake8 on save
"autocmd BufWritePost /Volumes/fem-viskande-apor/*.py call Flake8()
"let g:flake8_cmd=$HOME . "/devel/binutils/flake8"
"let g:flake8_show_in_gutter=1
"let g:flake8_show_in_gutter=1
"let g:flake8_show_quickfix=0
"let g:flake8_error_marker="E"
"let g:flake8_warning_marker="W"
"let g:flake8_pyflake_marker="F"
"let g:flake8_complexity_marker="C"
"let g:flake8_naming_marker="N"

" ALE
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_column_always = 1
let g:ale_sign_warning = 'W'
let g:ale_sign_error = 'E'
let g:ale_python_flake8_args = '--ignore=C,E111,E114,E22,E201,E241,E265,E272,E3,E501,E731'
let g:ale_python_pylint_executable = ''

fun! ALEClearBuffer(buffer)
  if get(g:, 'ale_enabled') && has_key(get(g:, 'ale_buffer_info', {}), a:buffer)
    call ale#engine#SetResults(a:buffer, [])
    call ale#engine#Cleanup(a:buffer)
  endif
endfun

augroup UnALE
  autocmd!
  autocmd TextChanged,TextChangedI,InsertEnter,InsertLeave * call ALEClearBuffer(bufnr('%'))
augroup END
