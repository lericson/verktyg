#!/usr/bin/env python
"""Exits when a file or directory is changed.

Watches for changes in any file (in any subdirectory) of the passed-in glob
patterns.

A note on the design of the program:

    The file watching actually happens in a separate thread. When that thread
    signals back to the main thread that a matching file has been changed, the
    main thread exits and stops the auxiliary thread.

This is done so that when a keyboard interrupt is triggered, the Python runtime
is awoken and can stop.

"""


import os
import re
import sys
import argparse
import threading

import fsevents


matched_ev = threading.Event()

CAUSES = 'attrib create delete modify moved_from moved_to'.split()
CAUSE_MAP = {k: getattr(fsevents, f'IN_{k.upper()}') for k in CAUSES}


def pat_to_re(a):
    pat = r'^' + re.escape(a) + r'(?:$|/)'
    pat = pat.replace(r'\\\*', '\0blorp\0')
    pat = pat.replace(r'\/\*', r'\/[^\.]\*')
    pat = pat.replace(r'\*', '[^/]+')
    pat = pat.replace('\0blorp\0', r'\\\*')
    #print(f'{pat = }')
    return re.compile(pat)


def pat_to_dirn(a):
    return a.split('*', 1)[0].rsplit('/', 1)[0]


ap = argparse.ArgumentParser()
ap.add_argument('--exclude', '-x', action='append', default=[])
ap.add_argument('pattern',         nargs='+')


def main(args=None):
    opts = ap.parse_args(args)
    #print(f'{opts = }')

    # All patterns (and excludes) must be absolute since the FSEvents are
    # absolute.
    opts.pattern = [os.path.abspath(p) for p in opts.pattern]
    opts.exclude = [os.path.abspath(p) for p in opts.exclude]

    include_tests = [pat_to_re(p).match for p in opts.pattern]
    exclude_tests = [pat_to_re(p).match for p in opts.exclude]

    #: Which directories to watch.
    watch_dirns = [pat_to_dirn(p) for p in opts.pattern]

    def callback(ev):
        include_results = [t(ev.name) for t in include_tests]
        exclude_results = [t(ev.name) for t in exclude_tests]
        #print(f'{ev.name = }')
        #print(f'{include_results = }')
        #print(f'{exclude_results = }')
        if any(include_results) and not any(exclude_results):
            #print(ev.mask, bin(ev.mask), {k for k, m in CAUSE_MAP.items() if ev.mask & m}, ev.name)
            sys.stdout.write('changed: %s\n' % (ev.name,))
            matched_ev.set()


    obs = fsevents.Observer()
    obs.daemon = True

    #print(f'{watch_dirns = }')
    stream = fsevents.Stream(callback, *watch_dirns, file_events=True)
    obs.schedule(stream)

    obs.start()

    try:
        while not matched_ev.is_set():
            if not obs.is_alive():
                sys.exit(2)
            matched_ev.wait(timeout=1)
    except KeyboardInterrupt:
        sys.exit(1)
    finally:
        obs.stop()

if __name__ == "__main__":
    main()
